{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Constants from \"expo-constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar baseUrl = \"https://owner-api.teslamotors.com/\";\nexport default function App() {\n  var _useState = useState(\"brbgoingtomars\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(\"elon@tesla.com\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(\"1\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      clientSecret = _useState6[0],\n      setClientSecret = _useState6[1];\n\n  var _useState7 = useState(\"2\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      clientId = _useState8[0],\n      setClientId = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      _csrf = _useState10[0],\n      setCsrf = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      _phase = _useState12[0],\n      setPhase = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      transactionId = _useState14[0],\n      setTransactionId = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      _useState16 = _slicedToArray(_useState15, 2),\n      cancel = _useState16[0],\n      setCancel = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      isLoading = _useState18[0],\n      setIsLoading = _useState18[1];\n\n  var onChangeNameHandler = function onChangeNameHandler(password) {\n    setPassword(password);\n  };\n\n  var onChangeEmailHandler = function onChangeEmailHandler(email) {\n    setEmail(email);\n  };\n\n  var onChangeClientSecretHandler = function onChangeClientSecretHandler(clientSecret) {\n    setClientSecret(clientSecret);\n  };\n\n  var onChangeClientIdHandler = function onChangeClientIdHandler(clientId) {\n    setClientId(clientId);\n  };\n\n  var findHiddenFieldValueByFieldName = function findHiddenFieldValueByFieldName(data, fieldName) {\n    var field = data.substring(data.indexOf(fieldName));\n    field = field.substring(field.indexOf('value=\"') + 7);\n    field = field.substring(0, field.indexOf('\"'));\n    return field;\n  };\n\n  var onSubmitFormHandler = function onSubmitFormHandler(event) {\n    var url;\n    return _regeneratorRuntime.async(function onSubmitFormHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!password.trim() || !email.trim() || !clientSecret.trim() || !clientId.trim())) {\n              _context.next = 3;\n              break;\n            }\n\n            alert(\"Password or Email or client info is invalid\");\n            return _context.abrupt(\"return\");\n\n          case 3:\n            setIsLoading(true);\n            url = \"https://auth.tesla.com/oauth2/v3/authorize?\" + \"client_id=ownerapi&code_challenge=123&code_challenge_method=S256&redirect_uri=https://auth.tesla.com/void/callback&response_type=code&\" + \"scope=openid email offline_access&state=123\";\n            axios(url).then(function (response) {\n              var cookie = response.headers['set-cookie'][0];\n\n              var _csrfField = findHiddenFieldValueByFieldName(response.data, \"_csrf\");\n\n              setCsrf(_csrfField);\n\n              var _phaseField = findHiddenFieldValueByFieldName(response.data, \"_phase\");\n\n              setPhase(_phaseField);\n              var transaction_idField = findHiddenFieldValueByFieldName(response.data, \"transaction_id\");\n              setTransactionId(transaction_idField);\n              var cancelField = 1;\n              setCancel(cancelField);\n              setIsLoading(false);\n              console.log(\"AAA\");\n            }).catch(function (error) {\n              alert(\"error \" + error);\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: _jsxs(View, {\n      children: [_jsx(View, {\n        style: styles.wrapper,\n        children: isLoading ? _jsx(Text, {\n          style: styles.formHeading,\n          children: \" Loading \"\n        }) : _jsx(Text, {\n          style: styles.formHeading,\n          children: \"Authorize\"\n        })\n      }), _jsx(View, {\n        style: styles.wrapper,\n        children: _jsx(TextInput, {\n          placeholder: \"Password\",\n          place: true,\n          placeholderTextColor: \"#ffffff\",\n          style: styles.input,\n          value: password,\n          editable: !isLoading,\n          onChangeText: onChangeNameHandler\n        })\n      }), _jsx(View, {\n        style: styles.wrapper,\n        children: _jsx(TextInput, {\n          placeholder: \"Email\",\n          placeholderTextColor: \"#ffffff\",\n          style: styles.input,\n          value: email,\n          editable: !isLoading,\n          onChangeText: onChangeEmailHandler\n        })\n      }), _jsx(View, {\n        style: styles.wrapper,\n        children: _jsx(TextInput, {\n          placeholder: \"Client Secret\",\n          placeholderTextColor: \"#ffffff\",\n          style: styles.input,\n          value: clientSecret,\n          editable: !isLoading,\n          onChangeText: onChangeClientSecretHandler\n        })\n      }), _jsx(View, {\n        style: styles.wrapper,\n        children: _jsx(TextInput, {\n          placeholder: \"Client Id\",\n          placeholderTextColor: \"#ffffff\",\n          style: styles.input,\n          value: clientId,\n          editable: !isLoading,\n          onChangeText: onChangeClientIdHandler\n        })\n      }), _jsx(View, {\n        children: _jsx(Button, {\n          title: \"Submit\",\n          onPress: onSubmitFormHandler,\n          style: styles.submitButton,\n          disabled: isLoading\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#252526\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: Platform.OS === \"ios\" ? 0 : Constants.statusBarHeight\n  },\n  formHeading: {\n    color: \"#ffffff\"\n  },\n  wrapper: {\n    marginBottom: 10\n  },\n  input: {\n    borderWidth: 2,\n    borderColor: \"grey\",\n    minWidth: 200,\n    textAlignVertical: \"center\",\n    paddingLeft: 10,\n    borderRadius: 20,\n    color: \"#ffffff\"\n  },\n  submitButton: {\n    backgroundColor: \"gray\",\n    padding: 100\n  }\n});","map":{"version":3,"sources":["/Users/rs282j/Documents/Dev/charge-point/tesla-app/App.js"],"names":["axios","React","useState","Constants","baseUrl","App","password","setPassword","email","setEmail","clientSecret","setClientSecret","clientId","setClientId","_csrf","setCsrf","_phase","setPhase","transactionId","setTransactionId","cancel","setCancel","isLoading","setIsLoading","onChangeNameHandler","onChangeEmailHandler","onChangeClientSecretHandler","onChangeClientIdHandler","findHiddenFieldValueByFieldName","data","fieldName","field","substring","indexOf","onSubmitFormHandler","event","trim","alert","url","then","response","cookie","headers","_csrfField","_phaseField","transaction_idField","cancelField","console","log","catch","error","styles","container","wrapper","formHeading","input","submitButton","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","marginTop","Platform","OS","statusBarHeight","color","marginBottom","borderWidth","borderColor","minWidth","textAlignVertical","paddingLeft","borderRadius","padding"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  ScrollView,\n  View,\n  Button,\n  Platform,\n  TextInput,\n} from \"react-native\";\nimport Constants from \"expo-constants\";\n\nconst baseUrl = \"https://owner-api.teslamotors.com/\";\n\nexport default function App() {\n  const [password, setPassword] = useState(\"brbgoingtomars\");\n  const [email, setEmail] = useState(\"elon@tesla.com\");\n  const [clientSecret, setClientSecret] = useState(\"1\");\n  const [clientId, setClientId] = useState(\"2\");\n\n  const [_csrf, setCsrf] = useState(\"\");\n  const [_phase, setPhase] = useState(\"\");\n  const [transactionId, setTransactionId] = useState(\"\");\n  const [cancel, setCancel] = useState(\"\");\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onChangeNameHandler = (password) => {\n    setPassword(password);\n  };\n\n  const onChangeEmailHandler = (email) => {\n    setEmail(email);\n  };\n\n  const onChangeClientSecretHandler = (clientSecret) => {\n    setClientSecret(clientSecret);\n  };\n\n  const onChangeClientIdHandler = (clientId) => {\n    setClientId(clientId);\n  };\n\n  const findHiddenFieldValueByFieldName = (data, fieldName) => {\n    let field = data.substring(data.indexOf(fieldName));\n    field = field.substring(field.indexOf('value=\"') + 7);\n    field = field.substring(0, field.indexOf('\"'));\n    return field;\n  }\n\n  const onSubmitFormHandler = async (event) => {\n    if (!password.trim() || !email.trim() || !clientSecret.trim() || !clientId.trim()) {\n      alert(\"Password or Email or client info is invalid\");\n      return;\n    }\n    setIsLoading(true);\n\n    const url = \"https://auth.tesla.com/oauth2/v3/authorize?\" +\n        \"client_id=ownerapi&code_challenge=123&code_challenge_method=S256&redirect_uri=https://auth.tesla.com/void/callback&response_type=code&\" +\n        \"scope=openid email offline_access&state=123\";\n    axios(url)\n        .then(response => {\n          //console.log('set-cookie', response.headers['set-cookie'][0]);\n          //console.log('data', response.data);\n          const  cookie = response.headers['set-cookie'][0];\n          const _csrfField = findHiddenFieldValueByFieldName(response.data, \"_csrf\");\n          setCsrf(_csrfField);\n          const _phaseField = findHiddenFieldValueByFieldName(response.data, \"_phase\");\n          setPhase(_phaseField);\n          const transaction_idField = findHiddenFieldValueByFieldName(response.data, \"transaction_id\")\n          setTransactionId(transaction_idField);\n          const cancelField = 1;\n          setCancel(cancelField);\n\n          //console.log('_csrf', findHiddenFieldValueByFieldName(response.data, \"_csrf\"));\n          //console.log('_phase', findHiddenFieldValueByFieldName(response.data, \"_phase\"));\n          //console.log('transaction_id', findHiddenFieldValueByFieldName(response.data, \"transaction_id\"));\n          //console.log('cancel', findHiddenFieldValueByFieldName(response.data, \"cancel\"));\n\n          setIsLoading(false);\n          console.log(\"AAA\");\n\n        })\n        .catch((error) => {\n          //console.log('error', error);\n          alert(`error ${error}`);\n        })\n\n    // axios.post(baseUrl, {_csrf: _csrfField, _phase: _phaseField, transaction_id: transaction_idField, cancel: cancelField,\n    //   identity: email, credential: password}, {headers: {\n    //     //\"Content-Type\": \"application/x-www-form-urlencoded\",\n    //     // \"Cookie\": cookie\n    //   }})\n    //     .then((response) => {\n    //       console.log(\"AAA\",response);\n    //     })\n    //     .catch((error) => {\n    //       console.log('error', error);\n    //     })\n\n  };\n\n  return (\n      <ScrollView contentContainerStyle={styles.container}>\n        <View>\n          <View style={styles.wrapper}>\n            {isLoading ? (\n                <Text style={styles.formHeading}> Loading </Text>\n            ) : (\n                <Text style={styles.formHeading}>Authorize</Text>\n            )}\n          </View>\n          <View style={styles.wrapper}>\n            <TextInput\n                placeholder=\"Password\"\n                place\n                placeholderTextColor=\"#ffffff\"\n                style={styles.input}\n                value={password}\n                editable={!isLoading}\n                onChangeText={onChangeNameHandler}\n            />\n          </View>\n          <View style={styles.wrapper}>\n            <TextInput\n                placeholder=\"Email\"\n                placeholderTextColor=\"#ffffff\"\n                style={styles.input}\n                value={email}\n                editable={!isLoading}\n                onChangeText={onChangeEmailHandler}\n            />\n          </View>\n          <View style={styles.wrapper}>\n            <TextInput\n                placeholder=\"Client Secret\"\n                placeholderTextColor=\"#ffffff\"\n                style={styles.input}\n                value={clientSecret}\n                editable={!isLoading}\n                onChangeText={onChangeClientSecretHandler}\n            />\n          </View>\n          <View style={styles.wrapper}>\n            <TextInput\n                placeholder=\"Client Id\"\n                placeholderTextColor=\"#ffffff\"\n                style={styles.input}\n                value={clientId}\n                editable={!isLoading}\n                onChangeText={onChangeClientIdHandler}\n            />\n          </View>\n          <View>\n            <Button\n                title=\"Submit\"\n                onPress={onSubmitFormHandler}\n                style={styles.submitButton}\n                disabled={isLoading}\n            />\n          </View>\n        </View>\n      </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#252526\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: Platform.OS === \"ios\" ? 0 : Constants.statusBarHeight,\n  },\n  formHeading: {\n    color: \"#ffffff\",\n  },\n  wrapper: {\n    marginBottom: 10,\n  },\n  input: {\n    borderWidth: 2,\n    borderColor: \"grey\",\n    minWidth: 200,\n    textAlignVertical: \"center\",\n    paddingLeft: 10,\n    borderRadius: 20,\n    color: \"#ffffff\",\n  },\n  submitButton: {\n    backgroundColor: \"gray\",\n    padding: 100,\n  },\n});"]},"metadata":{},"sourceType":"module"}