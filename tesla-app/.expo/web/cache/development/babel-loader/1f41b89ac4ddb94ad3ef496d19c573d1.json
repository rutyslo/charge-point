{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Constants from \"expo-constants\";\nimport qs from 'qs';\nimport CryptoJS from \"crypto-js\";\nimport sha256 from 'crypto-js/sha256';\nimport Base64 from 'crypto-js/enc-base64';\nimport { WebView } from 'react-native-webview';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(\"brbgoingtomars\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(\"elon@tesla.com\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      accessToken = _useState6[0],\n      setAccessToken = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoading = _useState8[0],\n      setIsLoading = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      urlAuth = _useState10[0],\n      setUrlAuth = _useState10[1];\n\n  var onChangeNameHandler = function onChangeNameHandler(password) {\n    setPassword(password);\n  };\n\n  var onChangeEmailHandler = function onChangeEmailHandler(email) {\n    setEmail(email);\n  };\n\n  var generateCodeVerifier = function generateCodeVerifier() {\n    var result = '';\n    var characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < 86; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  };\n\n  function base64URL(string) {\n    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  }\n\n  var generateCodeChallenge = function generateCodeChallenge(code_verifier) {\n    return base64URL(CryptoJS.SHA256(code_verifier));\n  };\n\n  var onSubmitFormHandler = function onSubmitFormHandler(event) {\n    var codeVerifier, codeChallenge, url, loginHost, loginUrl;\n    return _regeneratorRuntime.async(function onSubmitFormHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!password.trim() || !email.trim())) {\n              _context.next = 3;\n              break;\n            }\n\n            alert(\"Password or Email is invalid\");\n            return _context.abrupt(\"return\");\n\n          case 3:\n            codeVerifier = generateCodeVerifier();\n            codeChallenge = generateCodeChallenge(codeVerifier);\n            console.log('codeVerifier::::', codeVerifier);\n            console.log('codeChallenge::::', codeChallenge);\n            url = \"https://auth.tesla.com/oauth2/v3/authorize?\" + (\"client_id=ownerapi&code_challenge=\" + codeChallenge + \"&code_challenge_method=S256&redirect_uri=https://auth.tesla.com/void/callback&response_type=code&\") + (\"scope=openid email offline_access&state=\" + generateCodeChallenge(generateCodeVerifier()));\n            loginHost = null;\n            loginUrl = null;\n            console.log(\"url\", url);\n            return _context.abrupt(\"return\");\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var codeVerifier = generateCodeVerifier();\n  var codeChallenge = generateCodeChallenge(codeVerifier);\n  console.log('codeVerifier::::', codeVerifier);\n  console.log('codeChallenge::::', codeChallenge);\n  var url = \"https://auth.tesla.com/oauth2/v3/authorize?\" + (\"client_id=ownerapi&code_challenge=\" + codeChallenge + \"&code_challenge_method=S256&redirect_uri=https://auth.tesla.com/void/callback&response_type=code&\") + (\"scope=openid email offline_access&state=\" + generateCodeChallenge(generateCodeVerifier()));\n\n  var _onNavigationStateChange = function _onNavigationStateChange(webViewState) {\n    console.log('webViewState', webViewState);\n  };\n\n  var convertUrlParams = function convertUrlParams(url) {\n    var regex = /[?&]([^=#]+)=([^&#]*)/g,\n        params = {},\n        match;\n\n    while (match = regex.exec(url)) {\n      params[match[1]] = match[2];\n    }\n\n    return params;\n  };\n\n  return _jsx(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: _jsxs(View, {\n      children: [_jsx(View, {\n        style: styles.wrapper,\n        children: isLoading ? _jsx(Text, {\n          style: styles.formHeading,\n          children: \" Loading \"\n        }) : _jsx(Text, {\n          style: styles.formHeading,\n          children: \"Authorize\"\n        })\n      }), _jsx(View, {\n        style: styles.wrapper,\n        children: _jsx(TextInput, {\n          placeholder: \"Password\",\n          place: true,\n          placeholderTextColor: \"#ffffff\",\n          style: styles.input,\n          value: password,\n          editable: !isLoading,\n          onChangeText: onChangeNameHandler\n        })\n      }), _jsx(View, {\n        style: styles.wrapper,\n        children: _jsx(TextInput, {\n          placeholder: \"Email\",\n          placeholderTextColor: \"#ffffff\",\n          style: styles.input,\n          value: email,\n          editable: !isLoading,\n          onChangeText: onChangeEmailHandler\n        })\n      }), _jsx(View, {\n        children: _jsx(Button, {\n          title: \"Submit\",\n          onPress: onSubmitFormHandler,\n          style: styles.submitButton,\n          disabled: isLoading\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#252526\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: Platform.OS === \"ios\" ? 0 : Constants.statusBarHeight\n  },\n  formHeading: {\n    color: \"#ffffff\"\n  },\n  wrapper: {\n    marginBottom: 10\n  },\n  input: {\n    borderWidth: 2,\n    borderColor: \"grey\",\n    minWidth: 200,\n    textAlignVertical: \"center\",\n    paddingLeft: 10,\n    borderRadius: 20,\n    color: \"#ffffff\"\n  },\n  submitButton: {\n    backgroundColor: \"gray\",\n    padding: 100\n  }\n});","map":{"version":3,"sources":["/Users/rs282j/Documents/Dev/charge-point/tesla-app/App.js"],"names":["axios","React","useEffect","useState","Constants","qs","CryptoJS","sha256","Base64","WebView","App","password","setPassword","email","setEmail","accessToken","setAccessToken","isLoading","setIsLoading","urlAuth","setUrlAuth","onChangeNameHandler","onChangeEmailHandler","generateCodeVerifier","result","characters","charactersLength","length","i","charAt","Math","floor","random","base64URL","string","toString","enc","replace","generateCodeChallenge","code_verifier","SHA256","onSubmitFormHandler","event","trim","alert","codeVerifier","codeChallenge","console","log","url","loginHost","loginUrl","_onNavigationStateChange","webViewState","convertUrlParams","regex","params","match","exec","styles","container","wrapper","formHeading","input","submitButton","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","marginTop","Platform","OS","statusBarHeight","color","marginBottom","borderWidth","borderColor","minWidth","textAlignVertical","paddingLeft","borderRadius","padding"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, {useEffect, useState} from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  ScrollView,\n  View,\n  Button,\n  Platform,\n  TextInput\n} from \"react-native\";\nimport Constants from \"expo-constants\";\nimport qs from 'qs';\nimport CryptoJS  from \"crypto-js\";\nimport sha256 from 'crypto-js/sha256';\nimport Base64 from 'crypto-js/enc-base64';\nimport { WebView } from 'react-native-webview';\n\nexport default function App() {\n  const [password, setPassword] = useState(\"brbgoingtomars\");\n  const [email, setEmail] = useState(\"elon@tesla.com\");\n\n  // const [password, setPassword] = useState(\"p6Jur8KM78f\");\n  // const [email, setEmail] = useState(\"logan.ta.arnold@gmail.com\");\n\n  const [accessToken, setAccessToken] = useState(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n    const [urlAuth, setUrlAuth] = useState(\"\");\n\n\n  const onChangeNameHandler = (password) => {\n    setPassword(password);\n  };\n\n  const onChangeEmailHandler = (email) => {\n    setEmail(email);\n  };\n\n    const generateCodeVerifier = () => {\n        let result           = '';\n        let characters       = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';\n        let charactersLength = characters.length;\n        for ( let i = 0; i < 86; i++ ) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    }\n\n    function base64URL(string) {\n        return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n    }\n    const generateCodeChallenge = (code_verifier) => {\n        return base64URL(CryptoJS.SHA256(code_verifier))\n    }\n\n  const onSubmitFormHandler = async (event) => {\n    if (!password.trim() || !email.trim()) {\n      alert(\"Password or Email is invalid\");\n      return;\n    }\n    //   axios(\"http://10.0.2.2:4000/tesla\")\n    //       .then(response => {console.log('respon', response);});\n    // return;\n\n    const codeVerifier = generateCodeVerifier();\n    const codeChallenge = generateCodeChallenge(codeVerifier);\n    console.log('codeVerifier::::',codeVerifier);\n    console.log('codeChallenge::::',codeChallenge);\n      // const codeVerifier = '123';\n      // const codeChallenge = '123';\n    const url = `https://auth.tesla.com/oauth2/v3/authorize?` +\n        `client_id=ownerapi&code_challenge=${codeChallenge}&code_challenge_method=S256&redirect_uri=https://auth.tesla.com/void/callback&response_type=code&` +\n        `scope=openid email offline_access&state=${generateCodeChallenge(generateCodeVerifier())}`;\n      let loginHost = null;\n      let loginUrl = null;\n      console.log(\"url\", url);\n      return;\n      setIsLoading(true);\n    axios(url)\n        .then(response => {\n            console.log('response-url::::', response.config.url);\n          loginUrl = response.config.url;\n          loginHost = 'https://auth.tesla.com/oauth2/v3/authorize';\n          console.log(\"loginUrl\", loginUrl);\n          console.log(\"loginHost\", loginHost);\n          const cookie = response.headers['set-cookie'][0];\n\n          let form = {};\n\n          let hiddenFormFields = response.data.match(/<input type=\"hidden\" [^>]+>/g);\n          hiddenFormFields.forEach(function (field) {\n            let name = field.match(/name=\"([^\"]+)\"/);\n            let value = field.match(/value=\"([^\"]*)\"/);\n            if (name && value) {\n              form[name[1]] = value[1];\n            }\n          });\n\n          let transactionId = form.transaction_id;\n\n          form.identity = email;\n          form.credential = password;\n          //form.cancel = 1;\n          console.log('form', form)\n          console.log('cookie', cookie)\n            let formBody = [];\n            for (let property in form) {\n                const encodedKey = encodeURIComponent(property);\n                const encodedValue = encodeURIComponent(form[property]);\n                formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n            formBody = formBody.join(\"&\");\n            console.log('formBody', formBody)\n          fetch(url, {\n              method: 'POST',\n              body : formBody,\n              credentials: 'include',\n              headers: {\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"Cookie\": cookie,\n                    \"referer\": loginUrl,\n                  \"sec-fetch-site\": \"same-origin\",\n                  \"sec-fetch-mode\": \"navigate\",\n                  \"sec-fetch-user\": \"?1\",\n                  \"sec-fetch-dest\": \"document\",\n                    \"origin\": loginHost\n                }})\n               .then((response) => {console.log('res', response);response.json()})\n                .then((responseData) => {\n                    console.log(\"Second response\",responseData);\n                    setIsLoading(false);\n                })\n                .catch((error) => {\n                    console.log('Second error', error);\n                    setIsLoading(false);\n            })\n\n\n        })\n        .catch((error) => {\n            setIsLoading(false);\n          console.log('error', error);\n        })\n\n\n  };\n    const codeVerifier = generateCodeVerifier();\n    const codeChallenge = generateCodeChallenge(codeVerifier);\n    console.log('codeVerifier::::',codeVerifier);\n    console.log('codeChallenge::::',codeChallenge);\n    // const codeVerifier = '123';\n    // const codeChallenge = '123';\n    const url = `https://auth.tesla.com/oauth2/v3/authorize?` +\n        `client_id=ownerapi&code_challenge=${codeChallenge}&code_challenge_method=S256&redirect_uri=https://auth.tesla.com/void/callback&response_type=code&` +\n        `scope=openid email offline_access&state=${generateCodeChallenge(generateCodeVerifier())}`;\n\n    const _onNavigationStateChange = (webViewState) => {\n        console.log('webViewState', webViewState);\n    }\n\n    const convertUrlParams = (url) => {\n        let regex = /[?&]([^=#]+)=([^&#]*)/g,\n            params = {},\n            match;\n        while (match = regex.exec(url)) {\n            params[match[1]] = match[2];\n        }\n        return params;\n    };\n\n  return (\n       // <WebView source={{ uri: url }} onNavigationStateChange={(navState) => {\n       //     // Keep track of going back navigation within component\n       //     console.log('nav', navState);\n       //     if (navState.title === \"Tesla - Error\") {\n       //         const callbackUrl = navState.url;\n       //         const params = convertUrlParams(callbackUrl);\n       //         axios.post(\"https://auth.tesla.com/oauth2/v3/token\", {\n       //                 grant_type: 'authorization_code',\n       //                 client_id: 'ownerapi',\n       //                 code_verifier: codeVerifier,\n       //                 code: params.code,\n       //                 redirect_uri: \"https://auth.tesla.com/void/callback\"\n       //              }, {\n       //             headers: {\n       //                  \"Accept\": \"*/*\",\n       //                 \"Content-Type\" : \"application/json\",\n       //                 \"Connection\" : \"keep-alive\"\n       //              }})\n       //             .then(result => {\n       //                 console.log(\"res-3\", result);\n       //                 axios.post(\"https://auth.tesla.com/oauth2/v3/token\", {\n       //                     grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n       //                     client_id: \"81527cff06843c8634fdc09e8ac0abefb46ac849f38fe1e431c2ef2106796384\",\n       //                     client_secret: \"c7257eb71a564034f9419ee651c7d0e5f7aa6bfbd18bafb5c5c033b093bb2fa3\"\n       //                 }, {\n       //                     headers: {\n       //                         Authorization: 'Bearer ' + result.body.access_token,\n       //                         'Content-Type': 'application/json'\n       //                     }})\n       //                     .then((response)=> {\n       //                         console.log(\"res-4\", response);\n       //                     })\n       //                     .catch(err => console.log(\"err-4\", err))\n       //             })\n       //             .catch(err => console.log(\"err-3\", err))\n       //\n       //         // axios.post(\"http://10.0.2.2:4000/tesla\", { urlLocation: callbackUrl, codeVerifier: codeVerifier })\n       //         //     .then(res => {console.log(\"res\", res)})\n       //         //     .catch(err => console.log(\"err\", err))\n       //     }\n       // }} />\n        <ScrollView contentContainerStyle={styles.container}>\n            <View>\n                <View style={styles.wrapper}>\n                    {isLoading ? (\n                        <Text style={styles.formHeading}> Loading </Text>\n                    ) : (\n                        <Text style={styles.formHeading}>Authorize</Text>\n                    )}\n                </View>\n                <View style={styles.wrapper}>\n                    <TextInput\n                        placeholder=\"Password\"\n                        place\n                        placeholderTextColor=\"#ffffff\"\n                        style={styles.input}\n                        value={password}\n                        editable={!isLoading}\n                        onChangeText={onChangeNameHandler}\n                    />\n                </View>\n                <View style={styles.wrapper}>\n                    <TextInput\n                        placeholder=\"Email\"\n                        placeholderTextColor=\"#ffffff\"\n                        style={styles.input}\n                        value={email}\n                        editable={!isLoading}\n                        onChangeText={onChangeEmailHandler}\n                    />\n                </View>\n                <View>\n                    <Button\n                        title=\"Submit\"\n                        onPress={onSubmitFormHandler}\n                        style={styles.submitButton}\n                        disabled={isLoading}\n                    />\n                </View>\n            </View>\n        </ScrollView>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#252526\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: Platform.OS === \"ios\" ? 0 : Constants.statusBarHeight,\n  },\n  formHeading: {\n    color: \"#ffffff\",\n  },\n  wrapper: {\n    marginBottom: 10,\n  },\n  input: {\n    borderWidth: 2,\n    borderColor: \"grey\",\n    minWidth: 200,\n    textAlignVertical: \"center\",\n    paddingLeft: 10,\n    borderRadius: 20,\n    color: \"#ffffff\",\n  },\n  submitButton: {\n    backgroundColor: \"gray\",\n    padding: 100,\n  },\n});"]},"metadata":{},"sourceType":"module"}